
# Set a default value for the SITE arg
ARG SITE
ARG CLOUDINARY_CLOUD_NAME=blank
ARG LISTINGS_QUERY=/listings
ARG BACKEND_API_BASE=http://localhost:3100
ARG JURISDICTION_NAME=Bay Area
ARG BLOOM_API_BASE=https://hba-dev-proxy.herokuapp.com
ARG CACHE_REVALIDATE=60
ARG IDLE_TIMEOUT=5
ARG LANGUAGES=en
ARG MAPBOX_TOKEN
ARG GTM_KEY
# feature flags
ARG FEATURE_LISTINGS_APPROVAL
ARG SHOW_PROFESSIONAL_PARTNERS
ARG NOTIFICATIONS_SIGN_UP_URL
ARG SHOW_MANDATED_ACCOUNTS
ARG SHOW_PWDLESS
ARG MAINTENANCE_WINDOW
ARG API_PASS_KEY
ARG SHOW_LOTTERY
ARG SHOW_PUBLIC_LOTTERY
ARG LOTTERY_DAYS_TILL_EXPIRY
ARG LIMIT_CLOSED_LISTING_ACTIONS

# The base image will contain all the source code needed for our site
FROM node:18.14-alpine AS base

# https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine
RUN apk add --no-cache libc6-compat

ARG SITE

# We don't need a complicated root path
WORKDIR /app

# Copy over config files to help with local dependency resolution
COPY --chown=node:node *.json yarn*.lock *config.js ./

# Bring in both sites
#COPY --chown=node:node sites ./sites

# Bring in just the site we need
COPY --chown=node:node sites/${SITE} ./sites/${SITE}

# And shared helpers
COPY --chown=node:node shared-helpers ./shared-helpers

# And UIC
COPY --chown=node:node doorway-ui-components ./doorway-ui-components


#####################
##### NEW STAGE #####
#####################

# The deps stage installs full dependencies
FROM base AS deps

ARG SITE

# We need to have this nested 2 layers deep due to hardcoded paths in package.json
WORKDIR /app/sites/${SITE}

# Install deps
RUN yarn install --frozen-lockfile


#####################
##### NEW STAGE #####
#####################

# The test stage can be used to run unit tests
FROM deps AS test

ARG SITE
ARG CLOUDINARY_CLOUD_NAME
ARG LISTINGS_QUERY

# We need to have this nested 2 layers deep due to hardcoded paths in package.json
WORKDIR /app/sites/${SITE}

# Cypress dependency for `yarn test` and `yarn test:headless`
# When running:
# [1] No version of Cypress is installed in: /home/node/.cache/Cypress/9.5.1/Cypress
# [1] Please reinstall Cypress by running: cypress install
#
# When building:
# Step 17/21 : RUN cypress install
# ---> Running in eef1a946a802
#/bin/sh: cypress: not found

# When running this image, make sure to use the built-in node user
USER node

# Next.js port is needed for some reason?
#EXPOSE 3000

# Debugger port
#EXPOSE 9230

# This can be overridden with other test commands
CMD yarn test:unit --verbose


#####################
##### NEW STAGE #####
#####################

# The build stage builds the app
FROM deps AS build

ARG SITE
ARG CLOUDINARY_CLOUD_NAME
ARG LISTINGS_QUERY
ARG BACKEND_API_BASE
ARG JURISDICTION_NAME
ARG BLOOM_API_BASE
ARG CACHE_REVALIDATE
ARG IDLE_TIMEOUT
ARG LANGUAGES
ARG MAPBOX_TOKEN
ARG GTM_KEY
ARG FEATURE_LISTINGS_APPROVAL
ARG SHOW_PROFESSIONAL_PARTNERS
ARG NOTIFICATIONS_SIGN_UP_URL
ARG SHOW_MANDATED_ACCOUNTS
ARG SHOW_PWDLESS
ARG MAINTENANCE_WINDOW
ARG API_PASS_KEY
ARG SHOW_LOTTERY
ARG SHOW_PUBLIC_LOTTERY
ARG LOTTERY_DAYS_TILL_EXPIRY
ARG LIMIT_CLOSED_LISTING_ACTIONS

# We need to have this nested 2 layers deep due to hardcoded paths in package.json
WORKDIR /app/sites/${SITE}

# Nest.js only uses build-time vars, not run time
# Until that gets fixed, each service needs to be rebuilt with new vars for each env
ENV CLOUDINARY_CLOUD_NAME=$CLOUDINARY_CLOUD_NAME
ENV FILE_SERVICE=$FILE_SERVICE
ENV LISTINGS_QUERY=$LISTINGS_QUERY
ENV BACKEND_API_BASE=$BACKEND_API_BASE
ENV JURISDICTION_NAME=$JURISDICTION_NAME
ENV BLOOM_API_BASE=$BLOOM_API_BASE
ENV CACHE_REVALIDATE=$CACHE_REVALIDATE
ENV IDLE_TIMEOUT=$IDLE_TIMEOUT
ENV LANGUAGES=$LANGUAGES
ENV MAPBOX_TOKEN=$MAPBOX_TOKEN
ENV GTM_KEY=$GTM_KEY
# feature flags
ENV FEATURE_LISTINGS_APPROVAL=$FEATURE_LISTINGS_APPROVAL
ENV SHOW_PROFESSIONAL_PARTNERS=$SHOW_PROFESSIONAL_PARTNERS
ENV NOTIFICATIONS_SIGN_UP_URL=$NOTIFICATIONS_SIGN_UP_URL
ENV SHOW_MANDATED_ACCOUNTS=$SHOW_MANDATED_ACCOUNTS
ENV SHOW_PWDLESS=$SHOW_PWDLESS
ENV MAINTENANCE_WINDOW=$MAINTENANCE_WINDOW
ENV SHOW_LOTTERY=$SHOW_LOTTERY
ENV SHOW_PUBLIC_LOTTERY=$SHOW_PUBLIC_LOTTERY
ENV LOTTERY_DAYS_TILL_EXPIRY=$LOTTERY_DAYS_TILL_EXPIRY
ENV LIMIT_CLOSED_LISTING_ACTIONS=$LIMIT_CLOSED_LISTING_ACTIONS
ENV API_PASS_KEY=$API_PASS_KEY




# Build/compile
RUN yarn build


#####################
##### NEW STAGE #####
#####################

# The optimize stage installs only production dependencies
FROM base AS optimize

ARG SITE

WORKDIR /app/sites/${SITE}

# Reinstall only dependencies required to run the application
RUN yarn install --frozen-lockfile --only=production


#####################
##### NEW STAGE #####
#####################

# The run stage is used to run our optimized app
FROM node:18.14-alpine AS run

ARG SITE

# Copy (almost) everything over to our fresh image
WORKDIR /app

# node_modules in the root has some necessary binaries
COPY --from=optimize --chown=node:node /app/node_modules ./node_modules

# Just the site we need to reduce size
COPY --from=optimize --chown=node:node /app/sites/${SITE}/node_modules ./sites/${SITE}/node_modules

# Bring in our local dependencies
COPY --from=build /app/shared-helpers ./shared-helpers
COPY --from=build /app/doorway-ui-components ./doorway-ui-components

# Switch to our site
WORKDIR /app/sites/${SITE}

# Yarn needs a package.json file to work, even for `yarn start`
COPY --chown=node:node \
        ./sites/${SITE}/package*.json \
        ./sites/${SITE}/tailwind.config.js \
        ./sites/${SITE}/next.config.js \
        ./

COPY --from=build --chown=node:node /app/sites/${SITE}/public ./public
COPY --from=build --chown=node:node /app/sites/${SITE}/.next ./.next

# Make sure to get the minimum dependencies
COPY --from=optimize --chown=node:node /app/sites/${SITE}/node_modules ./node_modules

# Disable Next.js telemetry by default
ENV NEXT_TELEMETRY_DISABLED 1

# Make sure to use the built-in node user
USER node

# Start the server
CMD yarn start
